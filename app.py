from flask import Flask, render_template, send_from_directory, url_for, redirect, request, jsonify
import folium
import osmnx as os
from geopy.geocoders import Nominatim
import json

app = Flask(__name__)


@app.route("/", methods=["GET", "POST"])
def dashboard():

    start_coords = (1.2946226, 103.8060366) #Currently is queenstown MRT
    end_coords = (1.3066853, 103.7872865)
    f_map = folium.Map(location=start_coords, zoom_start=16) #Shows map with location as queenstown MRT
    coords = [(1.2997843, 103.7788591), (1.3029859, 103.7733795), (1.2922139, 103.7884484), (1.2882455, 103.7942988), (1.3031694, 103.7735031), (1.2930791, 103.815686), (1.2916303, 103.8153478), (1.2920764, 103.8083829), (1.2876667, 103.8044049), (1.2830817, 103.8011399), (1.2829155, 103.8011697), (1.281254, 103.8020112), (1.2805329, 103.8023541), (1.2727752, 103.8021533), (1.3069306, 103.802226), (1.3043903, 103.8016838), (1.3016353, 103.8013311), (1.3008548, 103.8011762), (1.3002279, 103.8010435), (1.2968822, 103.8000837), (1.2919474, 103.8082596), (1.29263, 103.8075081), (1.2964326, 103.8048092), (1.2999419, 103.8009799), (1.3006813, 103.8005039), (1.3004411, 103.8007902), (1.2936334, 103.8068415), (1.3079254, 103.7912672), (1.3066693, 103.7934879), (1.306336, 103.7936376), (1.3083467, 103.7946997), (1.3097854, 103.7954098), (1.3074833, 103.7939965), (1.3097302, 103.7928191), (1.3116908, 103.7924173), (1.3120933, 103.7919977), (1.3082414, 103.7894968), (1.3120165, 103.7723864), (1.3122551, 103.7723909), (1.3079821, 103.7846268), (1.3103581, 103.7804965), (1.2994257, 103.7855463), (1.2960107, 103.7859937), (1.3096662, 103.7719494), (1.3032034, 103.782354), (1.3012425, 103.7837236), (1.299354, 103.7744188), (1.307795, 103.7912377), (1.2970732, 103.7876158), (1.2936766, 103.7858186), (1.2962376, 103.7803129), (1.2956449, 103.7800968), (1.2973614, 103.7784064), (1.2844144, 103.7872494), (1.2822263, 103.7874557), (1.2819349, 103.7872004), (1.2744567, 103.7968649), (1.2782573, 103.7857218), (1.2788891, 103.7858444), (1.2886554, 103.7780899), (1.2906552, 103.7733551), (1.2923327, 103.7680415), (1.2947437, 103.7653173), (1.290127, 103.7707094), (1.3023231, 103.7709149), (1.2939141, 103.7692491), (1.3015042, 103.7705072), (1.3011931, 103.7713565), (1.2966245, 103.7722844), (1.2964003, 103.7709395), (1.2961362, 103.7697382), (1.3017679, 103.7832936), (1.3041414, 103.7848308), (1.3037483, 103.7862459), (1.3036797, 103.7871537), (1.3021554, 103.7870577), (1.3015468, 103.7870991), (1.3010506, 103.7873402), (1.3007496, 103.7880235), (1.3010442, 103.8009244), (1.3039579, 103.8014627), (1.305578, 103.8016328), (1.3166123, 103.7718378), (1.3142407, 103.7721649), (1.3051234, 103.7712925), (1.3027739, 103.7710893), (1.2822477, 103.7821109), (1.2725681, 103.8021607), (1.2766073, 103.7912578), (1.2952795, 103.8134277), (1.295408, 103.8131922), (1.2959186, 103.8108039), (1.2966368, 103.8088837), (1.2968857, 103.8081759), (1.2978481, 103.806246), (1.2997518, 103.8034208), (1.2942011, 103.8074972), (1.2939047, 103.809379), (1.2935932, 103.8104399), (1.2924188, 103.8103959), (1.2991919, 103.8069571), (1.2994402, 103.8078828), (1.3009647, 103.8042226), (1.2922004, 103.8087683), (1.3086384, 103.7829951), (1.3026591, 103.7715113), (1.3035817, 103.7719554), (1.2979941, 103.8005344), (1.2914991, 103.8004752), (1.2907433, 103.8012404), (1.2963427, 103.8034546), (1.2959044, 103.80369), (1.2942575, 103.8023457), (1.2925261, 103.80224), (1.2913979, 103.8017377), (1.2875738, 103.8042843), (1.2919314, 103.7952588), (1.2933886, 103.7958179), (1.2945767, 103.7957664), (1.3031982, 103.7998402), (1.2955259, 103.8040851), (1.2969891, 103.7999498), (1.2935639, 103.7988736), (1.2919004, 103.7976125), (1.290371, 103.794254), (1.2905986, 103.7950155), (1.2917838, 103.7976536), (1.2928857, 103.7987097), (1.2938697, 103.7991036), (1.3034788, 103.8016007), (1.2997461, 103.800635), (1.3001567, 103.8007313), (1.2996825, 103.7926556), (1.2953101, 103.794609), (1.3003741, 103.8004811), (1.300014, 103.8013246), (1.299571, 103.8008998), (1.2881927, 103.8036893), (1.3137083, 103.7853548), (1.3127071, 103.7858744), (1.3118093, 103.7874243), (1.3118477, 103.7878651), (1.3119836, 103.7886544), (1.3083953, 103.7894964), (1.290772, 103.7667933), (1.2927434, 103.7635385), (1.2814889, 103.7809911), (1.2810335, 103.7813323), (1.2965349, 103.7738818), (1.2937145, 103.7754989), (1.306983, 103.7964364), (1.3043449, 103.797366), (1.2988567, 103.8026438), (1.292307, 103.808692), (1.297224, 103.7835041), (1.2956499, 103.7853697), (1.2961, 103.7856915), (1.2953081, 103.7861431), (1.2951571, 103.7863511), (1.2954668, 103.7857428), (1.272877, 103.8016056), (1.273283, 103.802083), (1.2934273, 103.7721131), (1.2922075, 103.7841775), (1.2915262, 103.7835979), (1.2945609, 103.772847), (1.294385, 103.7727545), (1.295154, 103.7774532), (1.294815, 103.7780657), (1.2919561, 103.7831786), (1.2920039, 103.7739086), (1.293736, 103.776023), (1.2777373, 103.7997106), (1.284771, 103.7887074), (1.2856186, 103.78901), (1.2908681, 103.7875317), (1.2896133, 103.7897335), (1.2924602, 103.7877731), (1.2929045, 103.785625), (1.2928567, 103.7849996), (1.2932446, 103.7853697), (1.2875029, 103.7950771), (1.2883153, 103.7933542), (1.2886394, 103.7929224), (1.2911522, 103.789756), (1.2885872, 103.7923609), (1.2837382, 103.8007102), (1.2852693, 103.7986637), (1.303916, 103.7719765), (1.3036653, 103.7712803), (1.3023289, 103.7745433), (1.3027452, 103.7721789), (1.2935367, 103.7854522), (1.2974824, 103.7828113), (1.2933827, 103.7989391), (1.2928672, 103.7993574), (1.2918384, 103.7880147), (1.291887, 103.7844004), (1.2968502, 103.7813302), (1.2967866, 103.7828898), (1.2968317, 103.7830548), (1.2969238, 103.7829297), (1.3016853, 103.780496), (1.303173, 103.7822826), (1.2823445, 103.8007897), (1.282274, 103.800024), (1.2853755, 103.7962773), (1.2856214, 103.7960455), (1.2857322, 103.7938796), (1.2854507, 103.7957046), (1.2758737, 103.7934688), (1.280066, 103.7937336), (1.2804443, 103.8021545), (1.2820223, 103.8000526), (1.2817974, 103.799989), (1.2807194, 103.7985477), (1.2839344, 103.7974059), (1.2780612, 103.7988305), (1.2746464, 103.7969642), (1.280733, 103.8020588), (1.2791144, 103.8017704), (1.2790489, 103.7966535), (1.2752168, 103.7953096), (1.2793938, 103.796752), (1.2789512, 103.8018841), (1.2789701, 103.8018206), (1.2803163, 103.790366), (1.2796887, 103.7911625), (1.2804218, 103.7918179), (1.2781886, 103.7904108), (1.2869452, 103.7881534), (1.2866414, 103.7899384), (1.2868331, 103.7904424), (1.2981904, 103.7734574), (1.278948, 103.797982), (1.2786654, 103.7983856), (1.2785235, 103.7988669), (1.2784217, 103.7991862), (1.2783128, 103.799475), (1.2794975, 103.7965201), (1.279757, 103.7972458), (1.2781894, 103.7997837), (1.2744804, 103.8013657), (1.2741183, 103.8017572), (1.2811572, 103.7928062), (1.2824663, 103.7898527), (1.2867599, 103.7830067), (1.2824292, 103.779634), (1.2865251, 103.7833067), (1.2967484, 103.7708363), (1.2969833, 103.7710393), (1.2804606, 103.7880166), (1.28012, 103.7892668), (1.2801905, 103.789878), (1.2918361, 103.8083833), (1.3032323, 103.7971922), (1.2957599, 103.7994072), (1.3087785, 103.7830787), (1.2933356, 103.7852735), (1.283581, 103.8011918), (1.2991017, 103.7633042), (1.2919988, 103.8130263), (1.2930513, 103.8132036), (1.2931584, 103.8131149), (1.2940386, 103.7757873), (1.2940067, 103.7758279), (1.2948822, 103.7753226), (1.2950484, 103.7756428), (1.2937326, 103.7758199), (1.2966329, 103.7735804), (1.2924045, 103.7737574), (1.2921482, 103.7744422), (1.2917293, 103.7768039), (1.2915008, 103.7772535), (1.290894, 103.7775856), (1.2911812, 103.7782646), (1.2891741, 103.7792527), (1.2916073, 103.7762863), (1.2904398, 103.7786894), (1.292212, 103.7742538), (1.2936838, 103.7753309), (1.2949629, 103.7749554), (1.2949416, 103.7749653), (1.2943075, 103.7774368), (1.2957234, 103.7964777), (1.2961383, 103.7942698), (1.2955908, 103.7960161), (1.2942886, 103.7972996), (1.2953962, 103.7961267), (1.2942021, 103.7968569), (1.2956682, 103.7955492), (1.2955785, 103.7962592), (1.2962446, 103.7940919), (1.2942152, 103.7969912), (1.2961837, 103.7955579), (1.2963391, 103.7956535), (1.2963528, 103.7954663), (1.2969218, 103.7945071), (1.2982597, 103.7953355), (1.2982776, 103.7933897), (1.3006956, 103.7937675), (1.3000202, 103.7941795), (1.2982128, 103.7907474), (1.3013816, 103.7894167), (1.3013797, 103.7903116), (1.3011688, 103.791756), (1.3033874, 103.7896669), (1.3020758, 103.7903907), (1.3033588, 103.7878264), (1.3010298, 103.7922511), (1.2982861, 103.7881048), (1.299696, 103.789889), (1.2982493, 103.7882247), (1.2981238, 103.7881545), (1.3034701, 103.7875355), (1.2993226, 103.7855162), (1.3035419, 103.7875817), (1.299093, 103.7859032), (1.303173, 103.7883793), (1.3013817, 103.7894964), (1.2999084, 103.7923334), (1.2972108, 103.7903861), (1.3011143, 103.7923181), (1.3014617, 103.7903369), (1.3014671, 103.7894931), (1.3012717, 103.7917551), (1.3014671, 103.7894143), (1.303692, 103.7927993), (1.304924, 103.7908781), (1.3048601, 103.792559), (1.3028006, 103.7927887), (1.3052225, 103.7921326), (1.3027447, 103.7928702), (1.300976, 103.792384), (1.3036679, 103.7928889), (1.3021207, 103.7927887), (1.3010518, 103.7924386), (1.3020853, 103.7928785), (1.3036701, 103.7916265), (1.3036124, 103.7929931), (1.3024958, 103.7917088), (1.3017123, 103.7938923), (1.2810679, 103.7860317), (1.2796636, 103.7855047), (1.2824701, 103.7852671), (1.281088, 103.7885153), (1.2812367, 103.7869421), (1.2806971, 103.787651), (1.2796816, 103.7863035), (1.279498, 103.7895091), (1.2796377, 103.7888479), (1.2798695, 103.7890477), (1.2778744, 103.7896293), (1.2797417, 103.7875635), (1.2795896, 103.7893946), (1.2781631, 103.7888883), (1.2793433, 103.7881793), (1.2797228, 103.7884831), (1.2775737, 103.7885018), (1.2791723, 103.7891254), (1.283718, 103.7813618), (1.2845629, 103.7844126), (1.2859904, 103.7840113), (1.2858241, 103.7841211), (1.2767488, 103.8002742), (1.2757792, 103.802024), (1.2773998, 103.7986349), (1.2775003, 103.7984397), (1.2760984, 103.8011256), (1.2758055, 103.8019247), (1.2918488, 103.7726874), (1.2918948, 103.7706649), (1.2917968, 103.7709638), (1.2910699, 103.7720342), (1.2913761, 103.7708705), (1.2912911, 103.7720651), (1.2856994, 103.7788484), (1.285365, 103.7786116), (1.2879887, 103.7764841), (1.2829936, 103.7799604), (1.285619, 103.7793124), (1.2848494, 103.7799206), (1.2835861, 103.7789759), (1.2832212, 103.7787022), (1.2836267, 103.7808348), (1.2834974, 103.7804283), (1.2847019, 103.7809392), (1.2866823, 103.7795323), (1.2930744, 103.7694361), (1.2920468, 103.7685915), (1.2908165, 103.772867), (1.2921235, 103.7730831), (1.2917623, 103.7694346), (1.29275, 103.7699949), (1.3006083, 103.7985038), (1.3000555, 103.7974392), (1.301444, 103.798027), (1.2987315, 103.7991545), (1.2959924, 103.7988074), (1.2976438, 103.7991446), (1.3071419, 103.7795337), (1.310694, 103.7790453), (1.3077084, 103.778512), (1.3104823, 103.7767011), (1.3072042, 103.7791111), (1.3076112, 103.7794609), (1.3091317, 103.7815373), (1.3097515, 103.7743657), (1.3083873, 103.7781093), (1.3090625, 103.7801473), (1.3114646, 103.7729277), (1.3098707, 103.778004), (1.3079524, 103.7793076), (1.3106454, 103.7791402), (1.3090402, 103.7747825), (1.3076195, 103.7791565), (1.3095723, 103.7788945), (1.3070784, 103.7813805), (1.3105854, 103.77552), (1.3091028, 103.7763712), (1.3093733, 103.7749439), (1.3115822, 103.7776975), (1.3118271, 103.7733388), (1.3095056, 103.7772666), (1.306726, 103.7807245), (1.3112481, 103.77598), (1.3108139, 103.7754807), (1.3110012, 103.7770696), (1.307561, 103.7795593), (1.3093778, 103.7746895), (1.3109017, 103.7750231), (1.3099174, 103.7776725), (1.3087543, 103.7800902), (1.3088941, 103.7819863), (1.3120681, 103.7740644), (1.3072531, 103.7798046), (1.3087807, 103.7822547), (1.3106152, 103.7767574), (1.309304, 103.7746638), (1.3080788, 103.7822183), (1.3075869, 103.7819746), (1.309013, 103.7814853), (1.3105778, 103.7721425), (1.3068253, 103.779797), (1.3120602, 103.7769317), (1.3113066, 103.7760964), (1.3080387, 103.778002), (1.3089311, 103.7763367), (1.3073693, 103.779975), (1.3093736, 103.7748083), (1.3092469, 103.7744692), (1.3109968, 103.7750796), (1.3065958, 103.7810452), (1.3071363, 103.7795516), (1.311144, 103.7768505), (1.3101127, 103.7777547), (1.3118348, 103.7750406), (1.3116792, 103.7753807), (1.3123296, 103.7749122), (1.3121723, 103.7748655), (1.2952664, 103.7823124), (1.2952928, 103.7824375), (1.2953716, 103.7824285), (1.2932514, 103.7838829), (1.2942277, 103.7848623), (1.2937449, 103.7838882), (1.2954508, 103.7842389), (1.2956005, 103.7841354), (1.2955245, 103.7840095), (1.2950019, 103.7820847), (1.2956778, 103.7821212), (1.2953199, 103.7836587), (1.2967495, 103.7829424), (1.2932914, 103.7839604), (1.293584, 103.7817345), (1.2935926, 103.7838815), (1.2929286, 103.7839468), (1.2882369, 103.8009359), (1.2885087, 103.8001299), (1.2851617, 103.8011469), (1.2857501, 103.7982546), (1.2854026, 103.7989597), (1.2872506, 103.8026348), (1.2856863, 103.8004875), (1.2850862, 103.8019941), (1.2855772, 103.801035), (1.2862956, 103.7999171), (1.2866081, 103.8008859), (1.2885734, 103.8004106), (1.286946, 103.800113), (1.3066853, 103.7872865)]
    f_map = folium.Map(location=start_coords, zoom_start=15)
    folium.Marker(location=start_coords, popup="<b>You are here!</b>" ).add_to(f_map)
    folium.Marker(location=end_coords, popup="<b>Destination</>", icon=folium.Icon(color="red")).add_to(f_map)
    # Creating a path based on the coords provided
    folium.PolyLine(coords, color="red", weight=3).add_to(f_map)
    
    return render_template("index.html", f_map=f_map._repr_html_())

def getAddress(coords):
    geolocator = Nominatim(user_agent="my_request")
    address = geolocator.reverse(coords)
    return address


@app.route("/passengers")
def _():
    return send_from_directory("data", "passengers.json", as_attachment=False)

@app.route("/driversjson")
def __():
    return send_from_directory("data", "drivers.json", as_attachment=False)

@app.route("/stylesheet")
def ___():
    return send_from_directory("style", "stylesheet.css", as_attachment=False)

@app.route("/passengersDetailed")
def ____():
    #Convert json file to dict
    with open("./data/passengers.json") as json_file:
        passenger = json.load(json_file)

    with open("./data/nodes.json") as json_file:
        nodes = json.load(json_file)

    for i in range(len(passenger)):
        if(("toAddr" in passenger) and ("fromAddr" in passenger)):
            for j in range(len(nodes)):
                if (passenger[i]["passengerFromNode"] == nodes[j]["nodeId"]):
                    coords = (nodes[j]['latitude'],nodes[j]['longitude'])
                    address = getAddress(coords)
                    passenger[i].update({"fromAddr":address.address})
                if (passenger[i]["passengerToNode"] == nodes[j]["nodeId"]):
                    coords = (nodes[j]['latitude'],nodes[j]['longitude'])
                    address = getAddress(coords)
                    passenger[i].update({"toAddr":address.address})
                    
    out_file = open("./data/passengers.json", "w")
    json.dump(passenger, out_file)
    out_file.close()
    return send_from_directory("data", "passengers.json", as_attachment=False)


if __name__ == "__main__":
    app.run()





## PROBABLY REMOVED LATER ON


# @app.route("/testplot", methods=["GET", "POST"])
# @login_required
# def dashboard():
#     form = rideInput()
#     geolocator = Nominatim(user_agent="my_request")
#     # Display map after successful login
#     start_coords = (1.2946226, 103.8060366) #Currently is queenstown MRT
#     f_map = folium.Map(location=start_coords, zoom_start=16) #Shows map with location as queenstown MRT
#     # After user has submitted address info
#     if form.is_submitted:
#         if form.addressFrom.data and form.destination.data is not None:
#             # Geocode to convert address into coords
#             location = geolocator.geocode(form.addressFrom.data + ", Singapore")
#             start_coords = (location.latitude, location.longitude)
#             dest = geolocator.geocode(form.destination.data + ", Singapore")
#             end_coords = (dest.latitude, dest.longitude)

#             # Fit to and from on map
#             f_map.fit_bounds([start_coords, end_coords], padding=[15,15])
#             folium.Marker(location=start_coords, popup="<b>You are here!</b>" ).add_to(f_map)
#             folium.Marker(location=end_coords, popup="<b>Destination</b>", icon=folium.Icon(color="red") ).add_to(f_map)
#     #Coordinates for the path
#     # coords = [(1.2946226, 103.8060366), (1.29589,103.80513), (1.29679, 103.80449), (1.29747,103.80371), (1.29682,103.80314), (1.29632, 103.80348)]
#     # f_map = folium.Map(location=start_coords, zoom_start=15)
#     # folium.Marker(location=start_coords, popup="<b>You are here!</b>" ).add_to(f_map)
#     # folium.Marker(location=end_coords, popup="<b>Destination</>", icon=folium.Icon(color="red")).add_to(f_map)
#     # # Creating a path based on the coords provided
#     # folium.PolyLine(coords, color="red", weight=3).add_to(f_map)
#     return render_template("index.html",  f_map=f_map._repr_html_(), form=form)

